// File: zivo/services/api.ts
import axios from "axios";
import { router } from "expo-router";
import { SecureStoreService, getApiUrl } from "./secureStore.service";

// ‚úÖ Axios instance
const api = axios.create({
  baseURL: getApiUrl(),
  headers: {
    "Content-Type": "application/json",
  },
});

// ‚úÖ Request interceptor: Token ekleme ve loglama
api.interceptors.request.use(
  async (config) => {
    try {
      const token = await SecureStoreService.getItem("zivo_token");

      if (token) {
        config.headers.Authorization = `Bearer ${token}`;
        console.log("[API] ‚úÖ Token eklendi:", token.slice(0, 10) + "...");
      } else {
        console.warn(
          "[API] ‚ö†Ô∏è Token bulunamadƒ±, Authorization header eklenmedi."
        );
      }

      const fullUrl = (config.baseURL ?? "") + (config.url ?? "");
      console.log("[API] üì§ ƒ∞stek g√∂nderiliyor:", {
        method: config.method,
        url: fullUrl,
        headers: config.headers,
      });

      return config;
    } catch (err) {
      console.error("[API] ‚ùå Token alma sƒ±rasƒ±nda hata:", err);
      return config;
    }
  },
  (error) => {
    console.error("[API] ‚ùå Request interceptor hatasƒ±:", error);
    return Promise.reject(error);
  }
);

// ‚úÖ Response interceptor: Hata yakalama ve y√∂nlendirme
api.interceptors.response.use(
  (response) => {
    console.log("[API] ‚úÖ Yanƒ±t alƒ±ndƒ±:", {
      url: response.config.url,
      status: response.status,
    });
    return response;
  },
  async (error) => {
    console.error("[API] ‚ùå API yanƒ±t hatasƒ±:", {
      status: error.response?.status,
      message: error.message,
      url: error.config?.url,
      method: error.config?.method,
      data: error.response?.data,
    });

    if (error.response?.status === 401) {
      console.warn(
        "[API] ‚ö†Ô∏è 401 Unauthorized - Token siliniyor ve login'e y√∂nlendiriliyor."
      );
      await SecureStoreService.removeItem("zivo_token");
      await SecureStoreService.removeItem("zivo_user");
      router.replace("/auth/login");
    }

    return Promise.reject(error);
  }
);

export default api;
